user  nginx;
worker_processes  1;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format ltsv ''
                    'status:$status\t'
                    'uri:$uri\t'
                    'user:$user\t'
                    'body_bytes_sent:$body_bytes_sent\t'
                    'bytes_sent:$bytes_sent\t'
                    'forwarded_for:$http_x_forwarded_for\t'
                    'forwarded_proto:$http_x_forwarded_proto\t'
                    'host:$host\t'
                    'maintenance_mode:$maintenance_mode\t'
                    'query_string:$query_string\t'
                    'referer:$http_referer\t'
                    'remote_addr:$remote_addr\t'
                    'request_body:$request_body\t'
                    'request_length:$request_length\t'
                    'request_method:$request_method\t'
                    'request_time:$request_time\t'
                    'request_uri:$request_uri\t'
                    'scheme:$scheme\t'
                    'time:$time_iso8601\t'
                    'upstream_response_time:$upstream_response_time\t'
                    'useragent:$http_user_agent';
    access_log  /var/log/nginx/access.log  ltsv;
    sendfile        on;
    #tcp_nopush     on;
    keepalive_timeout  65;
    #gzip  on;

    server {
        listen       80;
        server_tokens off;

        # Nginxコンテナの /var/www/maintenance は ホストの statics/maintenance をマウントしている。
        # よって、 statics/maintenance/on.txt が存在するときにメンテナンスモードへと切り替わる。
        set $maintenance_mode 0;
        if (-f "/var/www/maintenance/on.txt") {
            set $maintenance_mode 1;
        }

        if ($host != 'localhost') {
            return 403;
        }

        # for checking login status.
        # only returns a 202 Accepted response or a 401 Unauthorized response;
        location = /my_oauth/auth {
            internal;
            proxy_pass http://oauth2proxy:4180;
            proxy_set_header Host $host;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            break;
        }

        # to start oauth cycle
        location = /my_oauth/start {
            internal;
            proxy_pass http://oauth2proxy:4180;
            proxy_set_header Host $host;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            break;
        }

        # to complete oauth cycle
        location = /my_oauth/callback {
            auth_request off;
            proxy_pass http://oauth2proxy:4180;
            proxy_set_header Host $host;
            break;
        }

        location ~ /team(?<team_path>.*) {
            auth_request /my_oauth/auth;
            # pass information via X-User and X-Email headers to backend,
            # requires running with --set-xauthrequest flag
            auth_request_set $user   $upstream_http_x_auth_request_user;
            auth_request_set $email  $upstream_http_x_auth_request_email;
            error_page 401 = /my_oauth/start?rd=$uri;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $http_host;
            proxy_set_header X-User $user;
            proxy_set_header X-Email $email;
            rewrite ^ $team_path break;
            proxy_redirect off;
            proxy_pass   http://nginx_team;
            break;
        }

        # メンテナンスページを表示するかどうか判定する
        ## メンテナンスモードが適応されていても、
        ## 特に障害による緊急メンテナンスだった場合は、メンテナンスモード解除前に動作確認を行う必要がある。
        ## そのためここでは、リクエストが認証をパスしているものかチェックし、
        ## 認証をパスしていなければメンテナンスページを表示、
        ## パスしていればサイトを表示する。
        location ~ /maintenance_judge(?<original_path>.*) {
            internal;
            error_page 401 =503 /maintenance.html;
            rewrite ^ $original_path break;

            auth_request /my_oauth/auth;
            auth_request_set $user   $upstream_http_x_auth_request_user;
            auth_request_set $email  $upstream_http_x_auth_request_email;

            # ここは location / と同じ内容を記載しなければならない。
            ## 本当は DRY に書きたいのだが、書き方がわからないのでやむなし。。
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $http_host;
            proxy_redirect off;
            proxy_pass   http://nginx_general;
        }

        location /maintenance.html {
            charset UTF-8;
            root /var/www/maintenance;
            break;
        }

        location / {
            if ($maintenance_mode) {
                rewrite (.*) /maintenance_judge$1 last;
            }

            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $http_host;
            proxy_redirect off;
            proxy_pass   http://nginx_general;
            break;
        }
    }
}

